{
	"name": "Next",
	"scopeName": "source.next",
	"fileTypes": [
		"next"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#types"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#annotations"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#functions"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.next",
					"match": "//.*$"
				},
				{
					"name": "comment.block.next",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.next",
					"match": "\\b(package|import|const|enum|struct|interface|iota)\\b"
				},
				{
					"name": "storage.type.array.next",
					"match": "\\b(array|vector)\\b"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.next",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.next",
					"match": "\\\\."
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.integer.next",
					"match": "\\b([0-9]+(_[0-9]+)*)\\b"
				},
				{
					"name": "constant.numeric.float.next",
					"match": "\\b([0-9]+(_[0-9]+)*\\.([0-9]+(_[0-9]+)*)|\\.([0-9]+(_[0-9]+)*))\\b"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.boolean.next",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "constant.other.next",
					"match": "\\b[A-Z][A-Z0-9_]*\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"name": "storage.type.builtin.next",
					"match": "\\b(bool|int|int8|int16|int32|int64|float32|float64|string|byte|bytes|any)\\b"
				},
				{
					"match": "\\b(array|vector)\\s*<\\s*([a-zA-Z][a-zA-Z0-9]*)\\s*(?:,\\s*([0-9]+|[A-Z][A-Z0-9_]*)\\s*)?\\s*>",
					"captures": {
						"1": {
							"name": "storage.type.array.next"
						},
						"2": {
							"patterns": [
								{
									"include": "#types"
								}
							]
						},
						"3": {
							"patterns": [
								{
									"include": "#constants"
								},
								{
									"include": "#numbers"
								}
							]
						}
					}
				},
				{
					"match": "\\bmap\\s*<\\s*([a-zA-Z][a-zA-Z0-9]*)\\s*,\\s*([a-zA-Z][a-zA-Z0-9]*)\\s*>",
					"captures": {
						"0": {
							"name": "storage.type.generic.next"
						},
						"1": {
							"patterns": [
								{
									"include": "#simple-types"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "#types"
								}
							]
						}
					}
				},
				{
					"match": "\\b([A-Z][a-zA-Z0-9]*)\\b",
					"name": "storage.type.next"
				}
			]
		},
		"simple-types": {
			"patterns": [
				{
					"include": "#builtin-types"
				},
				{
					"match": "\\b([A-Z][a-zA-Z0-9]*)\\b",
					"name": "storage.type.next"
				}
			]
		},
		"builtin-types": {
			"match": "\\b(bool|int|int8|int16|int32|int64|float32|float64|string|byte|bytes)\\b",
			"name": "storage.type.builtin.next"
		},
		"declarations": {
			"patterns": [
				{
					"match": "(const)\\s+([A-Z][A-Z0-9_]*)\\s*(=)",
					"captures": {
						"1": {
							"name": "storage.type.next"
						},
						"2": {
							"name": "constant.other.next"
						},
						"3": {
							"name": "keyword.operator.assignment.next"
						}
					}
				},
				{
					"match": "(enum)\\s+([A-Z][a-zA-Z0-9]*)\\s*{",
					"captures": {
						"1": {
							"name": "storage.type.next"
						},
						"2": {
							"name": "entity.name.type.enum.next"
						}
					}
				},
				{
					"match": "(struct)\\s+([A-Z][a-zA-Z0-9]*)\\s*{",
					"captures": {
						"1": {
							"name": "storage.type.next"
						},
						"2": {
							"name": "entity.name.type.next"
						}
					}
				},
				{
					"match": "\\b([A-Z][a-zA-Z0-9]*)\\s*(?:=|,)",
					"captures": {
						"1": {
							"name": "variable.other.enummember.next"
						}
					}
				},
				{
					"match": "\\b([a-zA-Z][a-zA-Z0-9]*)\\s+([a-zA-Z][a-zA-Z0-9]*)\\s*;",
					"captures": {
						"1": {
							"patterns": [
								{
									"include": "#types"
								}
							]
						},
						"2": {
							"name": "variable.other.next"
						}
					}
				}
			]
		},
		"annotations": {
			"name": "meta.annotation.next",
			"match": "(@[a-zA-Z][a-zA-Z0-9]*)",
			"captures": {
				"1": {
					"name": "storage.type.annotation.next"
				}
			}
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.next",
					"match": "[+\\-*/%]"
				},
				{
					"name": "keyword.operator.logical.next",
					"match": "&&|\\|\\||!"
				},
				{
					"name": "keyword.operator.comparison.next",
					"match": "==|!=|<|>|<=|>="
				},
				{
					"name": "keyword.operator.assignment.next",
					"match": "="
				},
				{
					"name": "keyword.operator.bitwise.next",
					"match": "&|\\||\\^|<<|>>"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "support.function.builtin.next",
					"match": "\\b(len|min|max|abs|sprint|sprintf|sprintln|print|printf|error|assert|assert_eq|assert_ne|assert_lt|assert_le|assert_gt|assert_ge|float)\\b"
				}
			]
		}
	}
}
